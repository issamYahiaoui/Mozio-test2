{"version":3,"sources":["serviceWorker.js","redux/constants.js","redux/reducers/index.js","redux/store.js","components/common/header.js","redux/actions/index.js","containers/ResultPage/index.js","components/SearchInput.js","containers/SearchPage/index.js","containers/App/index.js","index.js"],"names":["Boolean","window","location","hostname","match","SET_RUNTIME_VARIABLE","runtime","state","arguments","length","undefined","startPoint","endPoint","passengersNb","date","distance","fetchingDistanceStarted","fetchingDistanceFailed","origins","destinations","action","type","Object","objectSpread","defineProperty","payload","name","value","rootReducer","history","combineReducers","router","connectRouter","root","runtimeReducer","createBrowserHistory","Header","react_default","a","createElement","Component","setRuntimeVariable","_ref","ResultPage","fetchDistance","console","log","_this","props","this","_this$props$root","className","toString","connect","dispatch","onChange","_ref2","url","fetch","then","res","json","catch","error","GoogleApiWrapper","apiKey","SearchInput","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","handleChange","address","handleSelect","onSelect","_this2","react_google_maps_loader_es","params","key","libraries","render","googleMaps","react_places_autocomplete_dist_default","getInputProps","suggestions","getSuggestionItemProps","loading","placeholder","map","suggestion","active","style","backgroundColor","cursor","description","SearchPage","e","target","onSubmit","preventDefault","push","geocodeByAddress","results","getLatLng","latLng","alert","components_SearchInput","googleCallbackName","onClick","App","header","esm","Fragment","react_router","exact","path","routeProps","containers_SearchPage","containers_ResultPage","ReactDOM","es","store","createStore","composeWithDevTools","applyMiddleware","routerMiddleware","thunk","containers_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.33563108.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","export const SET_RUNTIME_VARIABLE = 'SET_RUNTIME_VARIABLE';\n","\nimport {SET_RUNTIME_VARIABLE} from '../constants'\n\nexport default function runtime(state = {\n\n    startPoint : '' ,\n    endPoint : '' ,\n    passengersNb : 1 ,\n    date : '2019-04-18' ,\n    distance : null ,\n    fetchingDistanceStarted :false ,\n    fetchingDistanceFailed :  false ,\n    origins : \"\" ,\n    destinations : \"\"\n\n\n}, action) {\n    switch (action.type) {\n        case SET_RUNTIME_VARIABLE:\n            return {\n                ...state,\n                [action.payload.name]: action.payload.value,\n            };\n\n        default:\n            return state;\n    }\n}\n","import { createStore, combineReducers , applyMiddleware, } from 'redux'\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport {connectRouter, routerMiddleware} from 'connected-react-router'\nimport { createBrowserHistory } from 'history'\nimport runtimeReducer from './reducers'\nimport thunk from 'redux-thunk';\nconst rootReducer =(history)=> combineReducers({\n    router: connectRouter(history),\n    root : runtimeReducer\n});\nexport const history = createBrowserHistory()\n\nexport function configureStore() {\n    const store = createStore(\n        rootReducer(history),\n        composeWithDevTools(\n            applyMiddleware(\n                routerMiddleware(history) ,\n                thunk\n               ),\n        ))\n    return store;\n}\n","import React, {Component} from 'react';\nimport './style.css'\n\nclass Header extends Component {\n    render() {\n        return (\n            <header>\n                Mozio Test\n            </header>\n        );\n    }\n}\n\nexport default Header;\n","import {SET_RUNTIME_VARIABLE} from \"../constants\";\n\nexport const setRuntimeVariable = ({name,value}) => {\n    return {\n        type: SET_RUNTIME_VARIABLE,\n        payload: {\n            name,\n            value,\n        },\n    };\n}\n\nexport function fetchDistance({origins,destinations}) {\n    let url = `https://maps.googleapis.com/maps/api/distancematrix/json?origins=\"+origins+\"&destinations=\"+destinations+\"&mode=driving&key=AIzaSyBYezs6ze6ZeaU7-tG0Cz-I6_1bd2U8eSc\\n`\n\n\n    console.log(url)\n    return dispatch => {\n        dispatch(setRuntimeVariable({\n            name: 'fetchingDistanceStarted',\n            value : true\n        }));\n        return fetch(url)\n            .then(res => {\n                console.log('fetched distance',res)\n                 dispatch(setRuntimeVariable({\n                     name:'distance',\n                     value:res.json()\n                 }));\n                 dispatch(setRuntimeVariable({\n                     name : 'fetchingDistanceStarted',\n                     value:false\n                 }));\n                 return res.json()\n            })\n            .catch(error =>  dispatch(setRuntimeVariable({\n                name:'fetchingDistanceFailed',\n                value:true\n            })))\n    };\n}\n\n// Handle HTTP errors since fetch won't.\nfunction handleErrors(response) {\n    if (!response.ok) {\n        throw Error(response.statusText);\n    }\n    return response;\n}\n","import React, {Component} from 'react';\nimport {connect} from 'react-redux';\nimport {fetchDistance, setRuntimeVariable} from \"../../redux/actions\";\nimport {GoogleApiWrapper} from \"google-maps-react\";\n\nclass ResultPage extends Component {\n\n\n    fetchDistance = ()=>{\n        console.log('fetching distance ...')\n        this.props.fetchDistance({\n            origins : this.props.root.startPoint ,\n            destinations :this.props.root.endPoint\n        })\n\n    }\n\n    componentWillMount() {\n        this.fetchDistance()\n    }\n\n    render() {\n        console.log(this.props)\n\n        const {startPoint,endPoint,date,passengersNb,distance} = this.props.root\n        return (\n\n                <div className=\"container\">\n                    <form >\n                        <div>\n                            <div>\n                                Start Point :\n                                <span> {startPoint} </span>\n                            </div>\n                            <div>\n                                End Point :\n                                <span>{endPoint}</span>\n                            </div>\n                        </div>\n                        <div>\n                            <div>\n                                Date :\n                                <span>{date.toString()}</span>\n                            </div>\n                            <div>\n                                Passengers Number :\n                                <span>{passengersNb}</span>\n                            </div>\n                        </div>\n\n\n                        <div className=\"distanceView\">\n                            Distance is {distance}\n                        </div>\n                    </form>\n                </div>\n\n        );\n    }\n}\n\n\nconst mapStateToProps = (state) => ({\n    root : state.root\n});\n\nconst mapDispatchToProps = (dispatch) => ({\n    onChange: (payload) => {\n        dispatch(setRuntimeVariable(payload))\n    },\n    fetchDistance: (payload) => {\n        dispatch(fetchDistance(payload))\n    },\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(GoogleApiWrapper({\n    apiKey : \"AIzaSyBYezs6ze6ZeaU7-tG0Cz-I6_1bd2U8eSc\"\n})(ResultPage));\n","import React, {Component} from 'react';\nimport PlacesAutocomplete, {\n    geocodeByAddress,\n    getLatLng,\n} from 'react-places-autocomplete';\nimport ReactGoogleMapLoader from \"react-google-maps-loader\"\n\nclass SearchInput extends Component {\n    constructor(props) {\n        super(props);\n        this.state = { address: '' };\n    }\n\n    handleChange = address => {\n        console.log('address',address)\n        this.props.onChange(this.props.name,address)\n    };\n\n    handleSelect = address => {\n        this.props.onSelect(this.props.name,address)\n    };\n\n    render() {\n        return (\n            <ReactGoogleMapLoader\n                params={{\n                    key: \"AIzaSyBYezs6ze6ZeaU7-tG0Cz-I6_1bd2U8eSc\", // Define your api key here\n                    libraries: \"places,geometry\", // To request multiple libraries, separate them with a comma\n                }}\n                render={(googleMaps, error) =>\n                    googleMaps ? (\n                        <PlacesAutocomplete\n                            value={this.props.address}\n                            onChange={this.handleChange}\n                            onSelect={this.handleSelect}\n                        >\n                            {({ getInputProps, suggestions, getSuggestionItemProps, loading }) => (\n                                <div>\n                                    <input\n                                        {...getInputProps({\n                                            placeholder: 'Search Places ...',\n                                            className: 'location-search-input',\n                                        })}\n                                    />\n                                    <div className=\"autocomplete-dropdown-container\">\n                                        {loading && <div>Loading...</div>}\n                                        {suggestions.map(suggestion => {\n                                            const className = suggestion.active\n                                                ? 'suggestion-item--active'\n                                                : 'suggestion-item';\n                                            // inline style for demonstration purpose\n                                            const style = suggestion.active\n                                                ? { backgroundColor: '#fafafa', cursor: 'pointer' }\n                                                : { backgroundColor: '#ffffff', cursor: 'pointer' };\n                                            return (\n                                                <div\n                                                    {...getSuggestionItemProps(suggestion, {\n                                                        className,\n                                                        style,\n                                                    })}\n                                                >\n                                                    <span>{suggestion.description}</span>\n                                                </div>\n                                            );\n                                        })}\n                                    </div>\n                                </div>\n                            )}\n                        </PlacesAutocomplete>\n                    )   :   (\n                        <div>\n                            {/*Check for network error so loading state ends if user lost connection.*/}\n                            {error === \"Network Error\" ? <p>{error}</p> : <p>isLoading...</p>}\n                        </div>\n                    )\n                }/>\n\n\n\n        );\n    }\n}\n\nexport default SearchInput;\n","import React, {Component} from 'react';\nimport {connect} from 'react-redux';\nimport  {\n    geocodeByAddress,\n    getLatLng,\n} from 'react-places-autocomplete';\nimport {fetchDistance, setRuntimeVariable} from \"../../redux/actions\";\nimport  '../style.css'\nimport SearchInput from \"../../components/SearchInput\";\nclass SearchPage extends Component {\n\n\n\n    onChange = (e)=>{\n\n        this.props.onChange({\n            name : e.target.name ,\n            value : e.target.value\n        })\n\n    }\n\n    onSubmit=(e)=>{\n        //TODO : do some validation on inputs\n        console.log('on submit')\n        e.preventDefault()\n        this.props.history.push('/search')\n    }\n\n    handleChange = (name,address) => {\n        this.props.onChange({\n            name : name ,\n            value : address\n        })\n    };\n\n    handleSelect = (name,address) => {\n        this.props.onChange({\n            name : name ,\n            value : address\n        })\n        console.log('my name ...', name)\n        try{\n            geocodeByAddress(address)\n                .then(results => getLatLng(results[0]))\n                .then(latLng => {\n\n                })\n                .catch(error => console.error('Error', error));\n        }catch(e){\n            alert(e)\n        }\n\n    };\n\n\n\n    render() {\n\n        console.log(this.props.startPoint)\n\n        return (\n            <div className=\"container\">\n                <form className={\"column\"} >\n                    <div className={\"row\"}>\n                        <div>\n                            <label>Start Point</label>\n\n                            <SearchInput\n                                name={\"startPoint\"}\n                                address={this.props.root.startPoint}\n                                onChange={this.handleChange}\n                                onSelect={this.handleSelect}\n                                googleCallbackName=\"initOne\"\n                            />\n                        </div>\n\n                        <div >\n                            <label >End Point</label>\n                            <SearchInput\n                                name={\"endPoint\"}\n                                address={this.props.root.endPoint}\n                                onChange={this.handleChange}\n                                onSelect={this.handleSelect}\n                                googleCallbackName=\"initOne\"\n                            />\n                        </div>\n                    </div>\n                    <div   className={\"row\"} >\n                        <div >\n                            <label >Date</label>\n                            <input onChange={this.onChange} name=\"date\" type=\"date\"/>\n                        </div>\n                        <div >\n                            <label > Passengers Number</label>\n                            <input onChange={this.onChange} name=\"passengersNb\" type=\"text\"/>\n                        </div>\n                    </div>\n\n\n                    <div className=\"btn-submit\">\n                        <button  onClick={this.onSubmit}  >\n                            Submit\n                        </button>\n\n                    </div>\n                </form>\n\n\n            </div>\n        );\n    }\n}\n\n\n\nconst mapStateToProps = (state) => ({\n   root : state.root\n});\n\nconst mapDispatchToProps = (dispatch) => ({\n    onChange: (payload) => {\n        dispatch(setRuntimeVariable(payload))\n    },\n\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(SearchPage);\n","import React, {Component} from 'react';\n\nimport Header from \"../../components/common/header\";\nimport ResultPage from \"../ResultPage\";\nimport SearchPage from \"../SearchPage\";\nimport {Route, Switch} from \"react-router\";\nimport {ConnectedRouter} from \"connected-react-router\";\nimport {history} from \"../../redux/store\";\n\n\nclass App extends Component {\n    render() {\n        return (\n            <div>\n                <Header/>\n                <ConnectedRouter history={history}>\n                    <>\n                        <Switch>\n                            <Route exact path=\"/\" render={(routeProps) => (\n                                <SearchPage  {...routeProps} />\n                            )} />\n                            <Route exact path=\"/search\" render={(routeProps) => (\n                                <ResultPage  {...routeProps}/>\n                            )} />\n                        </Switch>\n                    </>\n                </ConnectedRouter>\n                {/*<Footer/>*/}\n            </div>\n        );\n    }\n}\n\nexport default App\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport { Provider } from 'react-redux'\nimport * as serviceWorker from './serviceWorker';\nimport {configureStore} from \"./redux/store\";\nimport App from \"./containers/App\";\n\n\nReactDOM.render(\n\n    <Provider store={configureStore()}>\n\n         <App />\n\n\n    </Provider>\n    , document.getElementById('root'));\n\nserviceWorker.unregister();\n"],"sourceRoot":""}